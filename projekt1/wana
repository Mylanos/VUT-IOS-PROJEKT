#!/bin/sh
####################################################################################################################################################
 # Soubor: wana
 # Projekt c. 1 - Analýzu záznamů webového serveru
 # Autor: Marek Ziska, xziska03@stud.fit.vutbr.cz
 # Skupina: 1BIB
 # Datum 29.03.2019
 #
 # Popis programu: Skript filtruje záznamy z webového serveru, podľa zadaných filterov, prípadne príkazov.
 #               
 # FILTER: -a DATETIME	–> after = jsou uvažovány pouze záznamy PO tomto datu (bez tohoto data). DATETIME je formátu YYYY-MM-DD HH:MM:SS.                
 # 		   -b DATETIME	–> before, jsou uvažovány pouze záznamy PŘED tímto datem (bez tohodo data).
 # 		   -ip IPADDR	–> jsou uvažovány pouze záznamy odpovídající poža-	davkům ze zdrojové adresy IPADDR. Formát IPADDR odpovídá IPv4 nebo IPv6.
 # 		   -uri URI – jsou uvažovány pouze záznamy týkající se dotazů na konkrétní webovou stránku. URI je základní regulární výraz.             
 # 
 # PRIKAZ: list-ip – výpis seznamu zdrojových IP adres.
 # 		   list-hosts – výpis seznamu zdrojových doménových jmen.  
 # 		   list-uri – výpis seznamu cílových zdrojů (URI).
 # 		   hist-ip – výpis histogramu četností dotazů podle zdrojových IP adres.
 # 		   hist-load – výpis histogramu zátěže (tj. počtu dotazů ve jednotlivých časových intervalech).
 #                              
 # SPUSTENIE: wana [FILTR] [PŘÍKAZ] [LOG [LOG2 [...]]                        
 #                                                                                               
 # Obsah programu: Program obsahuje všetky príkazy a filtre
###############################################################FUNKCIE##############################################################################
#TODO
#	ALLDONE


export POSIXLY_CORRECT=yes

convertMonthsToNum(){
	case "$months" in
		Jan) months=1;
		;;
		Feb) months=2;
		;;
		Mar) months=3;
		;;
		Apr) months=4;
		;;
		May) months=5;
		;;
		Jun) months=6;
		;;
		Jul) months=7;
		;;
		Aug) months=8;
		;;
		Sep) months=9;
		;;
		Oct) months=10;
		;;
		Nov) months=11;
		;;
		Dec) months=12;
		;;
		*)	
			months=1
		;;
	esac
}

execHISTLOAD(){
	dates=$1
	days=$(echo "$dates" | grep -o "\[[0-9]\{2\}" | sed 's/[^0-9]*//g')		#[DD/MMM/YYYY:HH:MM:SS +0100] najde dni v date2 (DD)
	dates=${dates#"[$days"} 	#orezanie dni v date1 (date1 = [DD/MMM/YYYY:HH:MM:SS +0100] –> /MMM/YYYY:HH:MM:SS +0100])
	months=$(echo "$dates" | grep -o "\/[a-zA-Z]\{1,3\}\/\{0,1\}" | sed 's/[^a-zA-Z]*//g')		#/MMM/YYYY:HH:MM:SS +0100]najde mesiace v date1 (MMM)
	dates=${dates#"/$months"}	#orezanie mesiacov v date1 (date1 = /MMM/YYYY:HH:MM:SS +0100] -> /YYYY:HH:MM:SS +0100])
	convertMonthsToNum
	test "$months" -lt 10 && months="0$months"
	years=$(echo "$dates" | grep -o "\/[0-9]\{4\}\:\{0,1\}" | sed 's/[^0-9]*//g')	#YYYY-MM-DD najde roky (YYYY)
	dates=${dates#"/$years"}
	hours=$(echo "$dates" | grep -o "\:[0-9]\{2\}\:" | sed 's/[^0-9]*//g')	#najde hodiny v date1
	dates=${dates#":$hours"}
	echo "$years-$months-$days $hours:00"
}

commandSelect(){		#ak bol zadany command, vyberie sa a vykona 
	case "$COMMAND" in 
		list-ip)
			allIPS=$(echo "$1" | while read -r line; do echo "$line" ; done| awk -F' ' '{ print $1 }')
			allIPS=$(echo "$allIPS" | while read -r line
				do
					if expr "$line" > /dev/null : '[0-9]\{0,3\}\.[0-9]\{0,3\}\.[0-9]\{1,3\}\.[0-9]\{1,3\}'; then
						echo "$line"
					elif expr "$line" > /dev/null : '[0-9a-fA-F]\{0,4\}\:[0-9a-fA-F]\{0,4\}\:\{0,1\}[0-9a-fA-F]\{0,4\}\:\{0,1\}[0-9a-fA-F]\{0,4\}\:\{0,1\}[0-9a-fA-F]\{0,4\}\:\{0,1\}[0-9a-fA-F]\{0,4\}\:\{0,1\}[0-9a-fA-F]\{0,4\}\:[0-9a-fA-F]\{0,4\}'; then
						echo "$line"
					fi 
				done)
			echo "$allIPS" | sort | uniq
		;;
		list-hosts)			#test ci to je ipv4
			allHosts=$(printf "%s" "$1" | awk -F' ' '{ print $1 }' | while read -r line2; do 				#bol tu problem s test.log na 19 riadku vypisovalo iny output
							if host "$line2" >/dev/null; then
								host "$line2" | awk -F' ' '{ print $5 }' 
							else
								printf "%s\n" "$line2"
							fi
						done)
			printf "%s" "$allHosts" | sort | uniq
		;;
		list-uri)
			allURIS=$(printf "%s" "$1" | awk -F' ' '{ print  $6$7 }')
			printf "%s\n" "$allURIS"  | while read -r line
				do 
					uriPREFIX=$(printf "%s" "$line" | grep -o "\"[A-Za-z\\]*")
					if [ "$uriPREFIX" = "\"GET" ] || [ "$uriPREFIX" = "\"POST" ] || [ "$uriPREFIX" = "\"HEAD" ]; then
						URI=${line#"$uriPREFIX"}
						printf "%s\n" "$URI"
					fi
				done | sort | uniq
		;;
		hist-ip)
			allIPS=$(echo "$1" | while read -r line; do echo "$line" ; done| awk -F' ' '{ print $1 }') #| sort | uniq -c | while read -r line2; do echo "$line2" ; done | awk -F' ' '{hashteg = "#"} {for (i = 1; i <= $1; i++){hashString = hashString hashteg}}{print $2,"("$1"): "hashString}{hashString=""}'
			allIPS=$(echo "$allIPS" | while read -r line
				do
					if expr "$line" > /dev/null : '[0-9]\{0,3\}\.[0-9]\{0,3\}\.[0-9]\{1,3\}\.[0-9]\{1,3\}'; then
						echo "$line"
					elif expr "$line" > /dev/null : '[0-9a-fA-F]\{0,4\}\:[0-9a-fA-F]\{0,4\}\:\{0,1\}[0-9a-fA-F]\{0,4\}\:\{0,1\}[0-9a-fA-F]\{0,4\}\:\{0,1\}[0-9a-fA-F]\{0,4\}\:\{0,1\}[0-9a-fA-F]\{0,4\}\:\{0,1\}[0-9a-fA-F]\{0,4\}\:[0-9a-fA-F]\{0,4\}'; then
						echo "$line"
					fi 
				done)
			echo "$allIPS" | sort | uniq -c | sort -r | while read -r line2; do echo "$line2" ; done | awk -F' ' '{hashteg = "#"} {for (i = 1; i <= $1; i++){hashString = hashString hashteg}}{print $2,"("$1"): "hashString}{hashString=""}'
		;;
		hist-load)
			date=$(printf "%s" "$1" | awk -F' ' '{ print $4$5 }' | while read -r line
				do
					date2=$(execHISTLOAD "$line")
					echo "$date2"
				done)
			echo "$date" | sort | uniq -c | while read -r line2; do echo "$line2" ; done | awk -F' ' '{hashteg = "#"} {for (i = 1; i <= $1; i++){hashString = hashString hashteg}}{print $2" "$3,"("$1"): "hashString}{hashString=""}'
		;;
	esac
}

testSMHzeros(){			#testuje ci boli zadane Sekundy Hodiny alebo Minuty s 0 na zaciatku ak hej nahradza bez nuly
	case "$1" in
		01) number=1;
		;;
		02) number=2;
		;;
		03) number=3;
		;;
		04) number=4;
		;;
		05) number=5;
		;;
		06) number=6;
		;;
		07) number=7;
		;;
		08) number=8;
		;;
		09) number=9;
		;;
		*)	number="$1"
		;;
	esac
	echo "$number"
}

convertArgDateToSeconds(){		#prevadza datum z argumentu na sekundy
date1="$2"
years=$(echo "$date1" | grep -o "[0-9]\{4\}\-\{0,1\}" | sed 's/[^0-9]*//g')	#YYYY-MM-DD HH:MM:SS najde roky (YYYY)
date1=${date1#"$years"}  	#orezanie rokov v date1 (date1 = #YYYY-MM-DD HH:MM:SS -> #-MM-DD HH:MM:SS)
months=$(echo "$date1" | grep -o "\-[0-9]\{1,2\}\-\{0,1\}" | sed 's/[^0-9]*//g')		#-MM-DD HH:MM:SS najde mesiace v date1 (MM)
date1=${date1#"-$months"} 		#orezanie mesiacov v date1 (date1 = YYYY-MM-DD HH:MM:SS -> #-DD HH:MM:SS)
if expr "$months" > /dev/null : '[0-9]\{1,2\}'; then			#kontrola bolo zadane nejake cislo
	if [ "$months" -gt 12 ] || [ "$months" -lt 1 ]; then			#kontrola ci su mesiace mimo rozshah
		echo "Zadali ste nevyhovujuci rozsah mesiacov! ($months)"
		exit 1
	fi
fi
days=$(echo "$date1" | grep -o "\-[0-9]\{1,2\}" | sed 's/[^0-9]*//g')		#-DD HH:MM:SSnajde dni v date1 (DD)
date1=${date1#"-$days"} 		#orezanie dni v date1 (date1 = '-DD HH:MM:SS' -> ' HH:MM:SS')
if expr "$days" > /dev/null : '[0-9]\{1,2\}'; then			#kontrola bolo zadane nejake cislo
	if [ "$days" -gt 31 ] || [ "$days" -lt 1 ]; then					#kontrola ci su mesiace mimo rozshah
		echo "Zadali ste nevyhovujuci rozsah dni! ($days)"
		exit 1
	fi
fi
hours=$(echo "$date1" | grep -o " [0-9]\{2\}\:\{0,1\}" | sed 's/[^0-9]*//g')	# HH:MM:SS najde hodiny v date1 (HH)
date1=${date1#" $hours"}			#orezanie hodin v date1 (date1 = ' HH:MM:SS' -> ':MM:SS'))
hours=$(testSMHzeros "$hours")			#nahradi  pripadne nuly na zaciatku (0x -> x)
if expr "$hours" > /dev/null : '[0-9]\{1,2\}'; then			#kontrola bolo zadane nejake cislo
	if [ "$hours" -gt 23 ] || [ "$hours" -lt 0 ]; then					#kontrola ci su mesiace mimo rozshah
		echo "Zadali ste nevyhovujuci rozsah hodin! ($hours)"
		exit 1
	fi
fi
minutes=$(echo "$date1" | grep -o "\:[0-9]\{1,2\}\:\{0,1\}" | sed 's/[^0-9]*//g')		#:MM:SS najde hodiny v date1 (HH)
date1=${date1#":$minutes"}		#z date1 orezieme ":MM (date1 = :MM:SS -> :SS)
minutes=$(testSMHzeros "$minutes")		#nahradi  pripadne nuly na zaciatku (0x -> x)
if expr "$minutes" > /dev/null : '[0-9]\{1,2\}'; then			#kontrola bolo zadane nejake cislo
	if [ "$minutes" -gt 59 ] || [ "$minutes" -lt 0 ]; then
		echo "Zadali ste nevyhovujuci rozsah minut! ($minutes)"
		exit 1
	fi
fi
seconds=$(echo "$date1" | grep -o "\:[0-9]\{1,2\}" | sed 's/[^0-9]*//g')		#:SS najde sekundy v date1 (SS)
seconds=$(testSMHzeros "$seconds")		#nahradi  pripadne nuly na zaciatku (0x -> x)
if expr "$seconds" > /dev/null : '[0-9]\{1,2\}'; then			#kontrola bolo zadane nejake cislo
	if [ "$seconds" -gt 59 ] || [ "$seconds" -lt 0 ]; then
		echo "Zadali ste nevyhovujuci rozsah minut! ($minutes)"
		exit 1
	fi
fi

date=$(( years*31556926 )) 		#vypocet rokov v sekundach
date=$(( date+(months*2629743) ))	#pricitanie mesiacov v sekundach
date=$(( date+(days*86400) ))	#pricitanie dni v sekundach ...
date=$(( date+(hours*3600) ))
date=$(( date+(minutes*60) ))
date=$(( date+seconds ))
echo "$date"
}

convertFileDateToSeconds(){
	date2="$1"
	days=$(echo "$date2" | grep -o "\[[0-9]\{2\}" | sed 's/[^0-9]*//g')		#[DD/MMM/YYYY:HH:MM:SS +0100] najde dni v date2 (DD)
	date2=${date2#"[$days"} 	#orezanie dni v date1 (date1 = [DD/MMM/YYYY:HH:MM:SS +0100] –> /MMM/YYYY:HH:MM:SS +0100])
	months=$(echo "$date2" | grep -o "\/[a-zA-Z]\{1,3\}\/\{0,1\}" | sed 's/[^a-zA-Z]*//g')		#/MMM/YYYY:HH:MM:SS +0100]najde mesiace v date1 (MMM)
	date2=${date2#"/$months"}	#orezanie mesiacov v date1 (date1 = /MMM/YYYY:HH:MM:SS +0100] -> /YYYY:HH:MM:SS +0100])
	convertMonthsToNum
	if expr "$months" > /dev/null : '[0-9]\{1,2\}'; then			#kontrola bolo zadane nejake cislo
		if [ "$months" -gt 12 ] || [ "$months" -lt 1 ]; then			#kontrola ci su mesiace mimo rozshah
			echo "Zadali ste nevyhovujuci rozsah mesiacov! ($months)"
			exit 1
		fi
	fi
	years=$(echo "$date2" | grep -o "\/[0-9]\{4\}\:\{0,1\}" | sed 's/[^0-9]*//g')	#YYYY-MM-DD najde roky (YYYY)
	date2=${date2#"/$years"}

	hours=$(echo "$date2" | grep -o "\:[0-9]\{2\}\:" | sed 's/[^0-9]*//g')	#najde hodiny v date1
	date2=${date2#":$hours"}
	hours=$(testSMHzeros "$hours")			#nahradi  pripadne nuly na zaciatku (0x -> x)

	if expr "$hours" > /dev/null : '[0-9]\{1,2\}'; then			#kontrola bolo zadane nejake cislo
		if [ "$hours" -gt 23 ] || [ "$hours" -lt 0 ]; then					#kontrola ci su mesiace mimo rozshah
			echo "Zadali ste nevyhovujuci rozsah hodin! ($hours)"
			exit 1
		fi
	fi
	minutes=$(echo "$date2" | grep -o "\:[0-9]\{2\}\:" | sed 's/[^0-9]*//g')	#najde hodiny v date1
	date2=${date2#":$minutes"}
	minutes=$(testSMHzeros "$minutes")		#nahradi  pripadne nuly na zaciatku (0x -> x)
	if expr "$minutes" > /dev/null : '[0-9]\{1,2\}'; then			#kontrola bolo zadane nejake cislo
		if [ "$minutes" -gt 59 ] || [ "$minutes" -lt 0 ]; then
			echo "Zadali ste nevyhovujuci rozsah minut! ($minutes)"
			exit 1
		fi
	fi
	seconds=$(echo "$date2" | grep -o "\:[0-9]\{2\} " | sed 's/[^0-9]*//g')	#najde hodiny v date1
	date2=${date2#":$seconds"}
	seconds=$(testSMHzeros "$seconds")		#nahradi  pripadne nuly na zaciatku (0x -> x)
	if expr "$seconds" > /dev/null : '[0-9]\{1,2\}'; then			#kontrola bolo zadane nejake cislo
		if [ "$seconds" -gt 59 ] || [ "$seconds" -lt 0 ]; then
			echo "Zadali ste nevyhovujuci rozsah sekund! ($seconds)"
			exit 1
		fi
	fi

	date=$(( years*31556926 )) 		#vypocet rokov v sekundach
	date=$(( date+(months*2629743) ))	#pricitanie mesiacov v sekundach
	date=$(( date+(days*86400) ))
	date=$(( date+(hours*3600) ))
	date=$(( date+(minutes*60) ))
	date=$(( date+(seconds*1) ))
	echo "$date"
	date=0
}

execA(){
	printf "%s\n" "$INPUT" | while read -r line2 
	 do 
		date1=$(printf "%s\n" "$line2" | grep -o "\[[0-9]\{2\}\/[a-zA-Z]\{3\}\/[0-9]\{4\}\:[0-9]\{2\}\:[0-9]\{2\}\:[0-9]\{2\}.\+[0-9]\{4\}\]" | { read -r mylan; printf "%s\n" "$mylan"; })	#v argumentoch najde date1
		date1Sec=$(convertFileDateToSeconds "$date1")
		test "$?" -eq 1 && (>&2 echo "$date1Sec" ) && exit 1	

		if [ "$date1Sec" -gt "$dateA" ] 2>/dev/null ; then
			printf "%s\n" "$line2"
		fi
	done
}

execB(){
	printf "%s\n" "$INPUT" |  while read -r line2
	 do 
		date1=$(printf "%s\n" "$line2" | grep -o "\[[0-9]\{2\}\/[a-zA-Z]\{3\}\/[0-9]\{4\}\:[0-9]\{2\}\:[0-9]\{2\}\:[0-9]\{2\}.\+[0-9]\{4\}\]" | { read -r mylan; printf "%s\n" "$mylan"; })	#v argumentoch najde date1
		date1Sec=$(convertFileDateToSeconds "$date1")
		test "$?" -eq 1 && (>&2 echo "$date1Sec" ) && exit 1	

		if [ "$date1Sec" -lt "$dateB" ] 2>/dev/null ; then
			printf "%s\n" "$line2"
		fi
	done	
}

execIP(){
	printf "%s\n" "$INPUT" | while read -r line2
		 do 
		 	logIP=$(printf "%s\n" "$line2" | awk -F' ' '{ print $1 }')
		 	if [ "$ipv4Flag" -eq 1 ]; then
			 	if [ "$logIP" = "$filterIPV4" ]; then
			 		printf "%s\n" "$line2"
			 	fi
			 else
			 	if [ "$logIP" = "$filterIPV6" ]; then
			 		printf "%s\n" "$line2"
			 	fi
			 fi
		 done
}

execURI(){
	printf "%s\n" "$INPUT" | while read -r line2
		 do 
		 	logURI=$(printf "%s\n" "$line2" | awk -F' ' '{ print $7 }' )
		 	if [ "$filterURI" = "$logURI" ]; then
			 	printf "%s\n" "$line2"
			fi
		 done
}

testRedundantCommands(){		#
	if [ "$NUM_OF_COMMANDS" -eq 0 ]; then
		test "$logFlag" -eq 1 && echo "Argumenty ste zadali v zlom poradi!" && exit 1		#test ci uz bol zadany log, ak hej -> exit (zle poradie)
		return
	else
		(>&2 echo "Zadali ste viac ako jeden prikaz!")
		exit 1
	fi

}

testRedundantFilter(){
	test "$1" -eq 1 && echo "Zadali ste dva krát ten istý filter!" && exit 1		#test ci uz bol zadany prikaz -b
	test "$2" -eq 1 && echo "Zadali ste argumenty v zlom poradi!" && exit 1		#test ci uz bol zadany log, ak hej -> exit (zle poradie)
}
##############################################################################FUNKCIE########################################################################################################
#TODO - TEST LOG - ci je readable
FILTER=0
COMMAND=nothing
NUM_OF_COMMANDS=0
aFlag=0
bFlag=0
ipFlag=0
uriFlag=0
logFlag=0
argumentString="$*"		#do premennej si ulozim vsekty argumenty
#test ze nebol zadany ziadny argument
if [ "$#" -eq 0 ]; then		#toto je bullshit oni to budu davat na stdin s redirection
	INPUT=$(while read -r line
	do
	 printf "%s\n" "$line"
	done < "${1:-/dev/stdin}")
	printf "%s" "$INPUT"
fi
#v cykle idem po argumetoch, hlada prikazy/filtre/datumy
for var in "$@"
do
	#test ci argument je vo formate datumu pomocou regexu
	if [ "$prevArg" = "-a" ] || [ "$prevArg" = "-b" ]; then
		if expr "$var" > /dev/null : '[0-9]\{4\}\-\{0,1\}[0-9]\{2\}\-\{0,1\}[0-9]\{2\} [0-9]\{0,2\}\:\{0,1\}[0-9]\{0,2\}\:\{0,1\}[0-9]\{0,2\}'; then	
				if [ "$prevArg" = "-a" ]; then
					dateA=$(convertArgDateToSeconds "$argumentString" "$var" )			#prepocitanie prveho datumu na sekundy
					test "$?" -eq 1 && (>&2 echo "$dateA" ) && exit 1			#test ci nenastala chyba v subshelli 
					argumentString=$(echo "$argumentString" | sed -e "s/$var//")		#orezanie spracovaneho datumu z stringu argumentov
				elif [ "$prevArg" = "-b" ]; then
					dateB=$(convertArgDateToSeconds "$argumentString" "$var" )
					test "$?" -eq 1 && (>&2 echo "$dateB" ) && exit 1			#test ci nestala chyba v subshelle
					argumentString=$(echo "$argumentString" | sed -e "s/$var//")		#orezanie spracovaneho datumu z stringu argumentov
				else
					(>&2 echo "Zadali ste argumenty v zlom poradi!(pred argumetom vo formate datumu nie je '-a' ani '-b')")
					exit 1
				fi
				prevArg="DATEarg"
				continue
		else
			(>&2 echo "Zadali ste argumenty v zlom poradi!(po argumente '-a' alebo '-b' nenasledoval argument vo formate 'YYYY-MM-DD HH:MM:SS')")
			exit 1
		fi
	fi
	#test ci argument je vo formate ipv4/ipv6 pomocou regexu
	if [ "$prevArg" = "-ip" ]; then 
		if expr "$var" > /dev/null : '^[0-9]\{0,3\}\.[0-9]\{0,3\}\.[0-9]\{1,3\}\.[0-9]\{1,3\}$'; then
			filterIPV4="$var"
			ipv4Flag=1
		elif expr "$var" > /dev/null : '^[0-9a-fA-F]\{0,4\}\:[0-9a-fA-F]\{0,4\}\:\{0,1\}[0-9a-fA-F]\{0,4\}\:\{0,1\}[0-9a-fA-F]\{0,4\}\:\{0,1\}[0-9a-fA-F]\{0,4\}\:\{0,1\}[0-9a-fA-F]\{0,4\}\:\{0,1\}[0-9a-fA-F]\{0,4\}\:[0-9a-fA-F]\{0,4\}$'; then
			filterIPV6="$var"
			ipv4Flag=0
		else
			(>&2 echo "Zadali ste argumenty v zlom poradi!(po argumente '-ip' nie je argument vo formate ipv4/ipv6)")
			exit 1
		fi
		prevArg="IParg"
		continue
	fi

	#test ci je uri
	if [ "$prevArg" = "-uri" ]; then
		if printf "%s" "$var" | grep -q '\/[0-9a-zA-Z\-\_\.\/\?\=\$\+\!\*\(\)\,]*'; then
#		if expr "$var" > /dev/null : '\/[0-9a-zA-Z\-\_\.\/\?\=\$\+\!\*\(\)\,]*'; then
				filterURI=$(printf "%s" "$var" | sed 's/\\//g')
		else
			(>&2 echo "Zadali ste argumenty v zlom poradi!(po argumete '-uri' nie je argument vo formate URI)")
			exit 1
		fi
		prevArg="URIarg"
		continue
	fi

	case $var in	#case testuje argumenty(string)
		-a)
			prevArg="-a"
			testRedundantFilter "$aFlag" "$logFlag"
			FILTER=$((FILTER + 1))		#k FILTER pricitava +1 (kombinacie filterov)
			aFlag=1
		;;
		-b)	prevArg="-b"
			testRedundantFilter "$bFlag" "$logFlag"
			FILTER=$((FILTER + 2))
			bFlag=1
		;;
		-ip)
			prevArg="-ip"
			testRedundantFilter "$ipFlag" "$logFlag"
			FILTER=$((FILTER + 4))
			ipFlag=1
		;;
		-uri)
			prevArg="-uri"
			testRedundantFilter "$uriFlag" "$logFlag"
			FILTER=$((FILTER + 8))
			uriFlag=1
		;;
		list-ip)
			prevArg="list-ip"
			testRedundantCommands
			COMMAND="list-ip"
			NUM_OF_COMMANDS=$((NUM_OF_COMMANDS+1))
		;;
		list-hosts)
			prevArg="list-hosts"
			testRedundantCommands
			COMMAND="list-hosts"
			NUM_OF_COMMANDS=$((NUM_OF_COMMANDS+1))
		;;
		list-uri)	
			prevArg="list-uri"
			testRedundantCommands
			COMMAND="list-uri"
			NUM_OF_COMMANDS=$((NUM_OF_COMMANDS+1))
		;;
		hist-ip) 
			prevArg="hist-ip"
			testRedundantCommands
			COMMAND="hist-ip"
			NUM_OF_COMMANDS=$((NUM_OF_COMMANDS+1))
		;;
		hist-load)	
			prevArg="hist-load"
			testRedundantCommands
			COMMAND="hist-load"
			NUM_OF_COMMANDS=$((NUM_OF_COMMANDS+1))
		;;
		*.gz)
			if [ -e "$var" ]; then		#test ci existuje log
				if [ "$#" -eq 1 ]; then		#test ci je jeden argument a to log
					gzFILE=$(gzip -cd "$var")
					printf "%s\n" "$gzFILE"
					exit 0
				fi
				if [ "$logFlag" -eq 0 ]; then
					INPUT=$(gzip -cd "$var")
				else
					gzFILE=$(gzip -cd "$var")
					INPUT="$INPUT $gzFILE"
				fi
			else
				(>&2 echo "Zadany argument ($var) nie je validný gzip!")
				exit 1
			fi
			logFlag=1
		;;
		*)
			if [ -e "$var" ]; then		#test ci existuje log
				if [ -r "$var" ];then
					if [ "$#" -eq 1 ]; then		#test ci je jeden argument a to log
						cat "$var"
						exit 0
					fi
					if [ "$logFlag" -eq 0 ]; then
						INPUT=$(cat "$var")
					else
						INPUT="$INPUT$(cat "$var")"
					fi
				else
					(>&2 echo "Zadany argument ($var) nema prava na citanie!")
					exit 1

				fi
			else
				(>&2 echo "Zadany argument ($var) nie je log, prikaz ci filter!")
				exit 1
			fi
			logFlag=1
		;;
	esac
done

if [ "$logFlag" -eq 0 ]; then
	if [ "$prevArg" = "-a" ] || [ "$prevArg" = "-b" ]; then
		(>&2 echo "Nebol zadany argument potrebny k spravnemu prevedeniu prikazu '-a' alebo '-b'!")
		exit 1
	elif [ "$prevArg" = "-ip" ]; then
		(>&2 echo "Nebol zadany argument potrebny k spravnemu prevedeniu prikazu '-ip'!")
		exit 1
	elif [ "$prevArg" = "-uri" ]; then
		(>&2 echo "Nebol zadany argument potrebny k spravnemu prevedeniu prikazu '-uri'!")
		exit 1
	else
		INPUT=$(while read -r line
		do
		 printf "%s\n" "$line"
		done < /dev/stdin/ )
	fi
fi

if [ "$FILTER" -eq 0 ]; then
	if [ "$NUM_OF_COMMANDS" -eq 0 ]; then
		printf "%s\n" "$INPUT"
	else
		commandSelect "$INPUT"
	fi
else
		case $FILTER in
			1)		# filter -A
				if [ "$NUM_OF_COMMANDS" -eq 1 ]; then
					commandSelect "$(execA)"
				else
					execA
				fi
			;;
			2)		#filter -B
				if [ "$NUM_OF_COMMANDS" -eq 1 ]; then
					commandSelect "$(execB)"
				else
					execB
				fi
			;;
			3)		#filter -A / -B
				if [ "$NUM_OF_COMMANDS" -eq 1 ]; then
					INPUT=$(execB)
					INPUT=$(execA)
					commandSelect "$INPUT"
				else
					INPUT=$(execB)
					execA
				fi
			;;
			4)		#filter -IP
				if [ "$NUM_OF_COMMANDS" -eq 1 ]; then
					commandSelect "$(execIP)"
				else
					execIP
				fi
			;;
			5)		#filter -IP / -A
				if [ "$NUM_OF_COMMANDS" -eq 1 ]; then
					INPUT=$(execA)
					commandSelect "$(execIP)"
				else
					INPUT=$(execA)
					execIP
				fi
			;;
			6)		#filter -IP / -B
				if [ "$NUM_OF_COMMANDS" -eq 1 ]; then
					INPUT=$(execB)
					commandSelect "$(execIP)"
				else
					INPUT=$(execB)
					execIP
				fi
			;;
			7)		#filter -IP / -B / -A
				if [ "$NUM_OF_COMMANDS" -eq 1 ]; then
					INPUT=$(execB)
					INPUT=$(execA)
					commandSelect "$(execIP)"
				else
					INPUT=$(execB)
					INPUT=$(execA)
					execIP
				fi
			;;
			8)		#filter -URI
				if [ "$NUM_OF_COMMANDS" -eq 1 ]; then
					commandSelect "$(execURI)"
				else
					execURI
				fi
			;;
			9)		#filter -URI / -A
				if [ "$NUM_OF_COMMANDS" -eq 1 ]; then
					INPUT=$(execA)
					commandSelect "$(execURI)"
				else
					INPUT=$(execA)
					execURI
				fi
			;;
			10)		#filter -URI / -B
				if [ "$NUM_OF_COMMANDS" -eq 1 ]; then
					INPUT=$(execB)
					commandSelect "$(execURI)"
				else
					INPUT=$(execB)
					execURI
				fi
			;;
			11)		#filter -URI / -B / -A
				if [ "$NUM_OF_COMMANDS" -eq 1 ]; then
					INPUT=$(execB)
					INPUT=$(execA)
					commandSelect "$(execURI)"
				else
					INPUT=$(execB)
					INPUT=$(execA)
					execURI
				fi
			;;
			12)		#filter -URI / -IP
				if [ "$NUM_OF_COMMANDS" -eq 1 ]; then
					INPUT=$(execIP)
					commandSelect "$(execURI)"
				else
					INPUT=$(execIP)
					execURI
				fi
			;;
			13)		#filter -URI / -IP / -A
				if [ "$NUM_OF_COMMANDS" -eq 1 ]; then
					INPUT=$(execIP)
					INPUT=$(execA)
					commandSelect "$(execURI)"
				else
					INPUT=$(execIP)
					INPUT=$(execA)
					execURI
				fi
			;;
			14)		#filter -URI / -IP / -B
				if [ "$NUM_OF_COMMANDS" -eq 1 ]; then
					INPUT=$(execIP)
					INPUT=$(execB)
					commandSelect "$(execURI)"
				else
					INPUT=$(execIP)
					INPUT=$(execB)
					execURI
				fi
			;;
			15)		#filter -URI / -IP / -B / -A
				if [ "$NUM_OF_COMMANDS" -eq 1 ]; then
					INPUT=$(execIP)
					INPUT=$(execA)
					INPUT=$(execB)
					commandSelect "$(execURI)"
				else
					INPUT=$(execIP)
					INPUT=$(execA)
					INPUT=$(execB)
					execURI
				fi
			;;
		esac

fi


